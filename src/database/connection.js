import { PrismaClient } from '@prisma/client';
import { logger } from '../utils/logger.js';

// Configuration Prisma avec optimisations
const prisma = new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
    {
      emit: 'event', 
      level: 'error',
    },
    {
      emit: 'event',
      level: 'info',
    },
    {
      emit: 'event',
      level: 'warn',
    },
  ],
  errorFormat: 'pretty',
});

// Logging des requ√™tes Prisma
prisma.$on('query', (e) => {
  if (process.env.NODE_ENV === 'development') {
    logger.debug(`üîç Query: ${e.query}`);
    logger.debug(`üìä Params: ${e.params}`);
    logger.debug(`‚è±Ô∏è Duration: ${e.duration}ms`);
  }
});

prisma.$on('error', (e) => {
  logger.error('‚ùå Erreur Prisma:', e);
});

prisma.$on('info', (e) => {
  logger.info(`‚ÑπÔ∏è Info Prisma: ${e.message}`);
});

prisma.$on('warn', (e) => {
  logger.warn(`‚ö†Ô∏è Warning Prisma: ${e.message}`);
});

// Fonction de connexion √† la base de donn√©es
export async function connectDatabase() {
  try {
    await prisma.$connect();
    
    // Test de la connexion
    await prisma.$queryRaw`SELECT 1`;
    
    logger.info('‚úÖ Connexion PostgreSQL √©tablie');
    
    return prisma;
  } catch (error) {
    logger.error('‚ùå Erreur de connexion √† la base de donn√©es:', error);
    throw error;
  }
}

// Fonction de d√©connexion propre
export async function disconnectDatabase() {
  try {
    await prisma.$disconnect();
    logger.info('üìä Base de donn√©es d√©connect√©e');
  } catch (error) {
    logger.error('‚ùå Erreur lors de la d√©connexion DB:', error);
    throw error;
  }
}

// Export de l'instance Prisma
export default prisma;